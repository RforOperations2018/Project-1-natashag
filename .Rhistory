masshootings<-read.csv("MassShootings.csv")
library(flexdashboard)
library(shiny)
library(reshape2)
library(dplyr)
library(plotly)
pdf(NULL)
masshootings<-read.csv("MassShootings.csv")
masshooting<-read.csv("MassShootings.csv")
masshooting<-read.csv("MassShootings.csv") %>%
mutate(Date = as.Date(Date, format = "%m/%d/%Y"))
library(dplyr)
masshooting<-read.csv("MassShootings.csv") %>%
mutate(Date = as.Date(Date, format = "%m/%d/%Y"))
View(masshooting)
library(shiny); runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
header <- dashboardHeader(title = "Mass Shooting Dashboard",
dropdownMenu(type = "notifications",
notificationItem(text = "5 escape pods deployed",
icon = icon("users"))
),
dropdownMenu(type = "tasks", badgeStatus = "success",
taskItem(value = 110, color = "green",
"Midichlorians")
),
dropdownMenu(type = "messages",
messageItem(
from = "Princess Leia",
message = HTML("Help Me Obi-Wan Kenobi! <br> You're my only hope."),
icon = icon("exclamation-circle"))
)
)
# I am assigning the elements to the sidebar
sidebar <- dashboardSidebar(
sidebarMenu(
id = "tabs",
menuItem("Plot", icon = icon("bar-chart"), tabName = "plot"),
menuItem("Table", icon = icon("table"), tabName = "table", badgeLabel = "new", badgeColor = "green"),
#Gender Slect
#selectInput("GenderSelect",
#  "Gender of the Shooter:",
# choices = sort(unique(masshooting$Gender)),
# multiple = TRUE,
#selectize = TRUE,
#selected = c("")),
# Race Selection
selectInput("RaceSelect",
"Race of the Shooter:",
choices = sort(unique(masshooting$Race)),
multiple = TRUE,
selectize = TRUE,
selected = c("")),
#Year Selection
sliderInput("YearSelect",
"Year of Shooting:",
min = min(masshooting$Year, na.rm = T),
max = max(masshooting$Year, na.rm = T),
value = c(min(masshooting$Year, na.rm = T), max(masshooting$Year, na.rm = T)),
step = 1)
)
)
#I am going to put the necessary information for the body
body <- dashboardBody(tabItems(
tabItem("plot",
fluidRow(
infoBoxOutput("Fatalities"),
valueBoxOutput("Injured")
),
fluidRow(
tabBox(title = "Plot",
width = 12,
#tabpanel("Total Victims per Year and Mental Health Status", plotlyOutput("plot_mentalh")),
tabPanel("Mass", plotlyOutput("plot_Injured")),
tabPanel("Height", plotlyOutput("plot_Fatalities")))
)
),
tabItem("table",
fluidPage(
box(title = "Mass Shooting Stats", DT::dataTableOutput("table"), width = 12))
)
)
)
ui <- dashboardPage(header, sidebar, body)
# Define server logic
server <- function(input, output) {
msInput <- reactive({
masshooting <- masshooting %>%
# Slider Filter Year
filter(Year >= input$YearSelect[1] & Year <= input$YearSelect[2])
# Race and Gender Filter
if (length(input$RaceSelect) > 0 ) {
masshooting <- subset(masshooting, Race %in% input$RaceSelect)
}
return(masshooting)
})
}
output$plot_mentalh <- renderPlotly({
masshooting <- msInput()
ggplot(data =  masshooting, aes(x = Year, y = Total.victims, fill = Mental.Health.Issues)) + geom_bar(stat = "identity")
})
output$plot_Injured <- renderPlotly({
masshooting <- msInput()
ggplot(data =  masshooting, aes(x = Year, y = Injured)) + geom_bar(stat = "identity")
})
runApp('Project-1.R')
runApp('Project-1.R')
server <- function(input, output) {
msInput <- reactive({
masshooting <- masshooting %>%
# Slider Filter Year
filter(Year >= input$YearSelect[1] & Year <= input$YearSelect[2])
# Race and Gender Filter
if (length(input$RaceSelect) > 0 ) {
masshooting <- subset(masshooting, Race %in% input$RaceSelect)
}
return(masshooting)
})
}
sever
View(server)
