masshootings<-read.csv("MassShootings.csv")
library(flexdashboard)
library(shiny)
library(reshape2)
library(dplyr)
library(plotly)
pdf(NULL)
masshootings<-read.csv("MassShootings.csv")
masshooting<-read.csv("MassShootings.csv")
masshooting<-read.csv("MassShootings.csv") %>%
mutate(Date = as.Date(Date, format = "%m/%d/%Y"))
library(dplyr)
masshooting<-read.csv("MassShootings.csv") %>%
mutate(Date = as.Date(Date, format = "%m/%d/%Y"))
View(masshooting)
library(shiny); runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
header <- dashboardHeader(title = "Mass Shooting Dashboard",
dropdownMenu(type = "notifications",
notificationItem(text = "5 escape pods deployed",
icon = icon("users"))
),
dropdownMenu(type = "tasks", badgeStatus = "success",
taskItem(value = 110, color = "green",
"Midichlorians")
),
dropdownMenu(type = "messages",
messageItem(
from = "Princess Leia",
message = HTML("Help Me Obi-Wan Kenobi! <br> You're my only hope."),
icon = icon("exclamation-circle"))
)
)
# I am assigning the elements to the sidebar
sidebar <- dashboardSidebar(
sidebarMenu(
id = "tabs",
menuItem("Plot", icon = icon("bar-chart"), tabName = "plot"),
menuItem("Table", icon = icon("table"), tabName = "table", badgeLabel = "new", badgeColor = "green"),
#Gender Slect
#selectInput("GenderSelect",
#  "Gender of the Shooter:",
# choices = sort(unique(masshooting$Gender)),
# multiple = TRUE,
#selectize = TRUE,
#selected = c("")),
# Race Selection
selectInput("RaceSelect",
"Race of the Shooter:",
choices = sort(unique(masshooting$Race)),
multiple = TRUE,
selectize = TRUE,
selected = c("")),
#Year Selection
sliderInput("YearSelect",
"Year of Shooting:",
min = min(masshooting$Year, na.rm = T),
max = max(masshooting$Year, na.rm = T),
value = c(min(masshooting$Year, na.rm = T), max(masshooting$Year, na.rm = T)),
step = 1)
)
)
#I am going to put the necessary information for the body
body <- dashboardBody(tabItems(
tabItem("plot",
fluidRow(
infoBoxOutput("Fatalities"),
valueBoxOutput("Injured")
),
fluidRow(
tabBox(title = "Plot",
width = 12,
#tabpanel("Total Victims per Year and Mental Health Status", plotlyOutput("plot_mentalh")),
tabPanel("Mass", plotlyOutput("plot_Injured")),
tabPanel("Height", plotlyOutput("plot_Fatalities")))
)
),
tabItem("table",
fluidPage(
box(title = "Mass Shooting Stats", DT::dataTableOutput("table"), width = 12))
)
)
)
ui <- dashboardPage(header, sidebar, body)
# Define server logic
server <- function(input, output) {
msInput <- reactive({
masshooting <- masshooting %>%
# Slider Filter Year
filter(Year >= input$YearSelect[1] & Year <= input$YearSelect[2])
# Race and Gender Filter
if (length(input$RaceSelect) > 0 ) {
masshooting <- subset(masshooting, Race %in% input$RaceSelect)
}
return(masshooting)
})
}
output$plot_mentalh <- renderPlotly({
masshooting <- msInput()
ggplot(data =  masshooting, aes(x = Year, y = Total.victims, fill = Mental.Health.Issues)) + geom_bar(stat = "identity")
})
output$plot_Injured <- renderPlotly({
masshooting <- msInput()
ggplot(data =  masshooting, aes(x = Year, y = Injured)) + geom_bar(stat = "identity")
})
runApp('Project-1.R')
runApp('Project-1.R')
server <- function(input, output) {
msInput <- reactive({
masshooting <- masshooting %>%
# Slider Filter Year
filter(Year >= input$YearSelect[1] & Year <= input$YearSelect[2])
# Race and Gender Filter
if (length(input$RaceSelect) > 0 ) {
masshooting <- subset(masshooting, Race %in% input$RaceSelect)
}
return(masshooting)
})
}
sever
View(server)
library(shiny); runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
runApp('Project-1.R')
library(httr)
library(readr)
library(httr)
library(readr)
kaggle.api <- "https://www.kaggle.com/api/v1/datasets/download/zusmani/us-mass-shootings-last-50-years/Mass%20Shootings%20Dataset.csv"
source("credentials.R")
kaggle.auth <- function() {
source("credentials.R")
httr::authenticate(username, key)
}
response <- httr::GET(kaggle.api)
response
response <- httr::GET(kaggle.api, kaggle.auth())
response
massshooting <- read_csv(response$content)
response$content
head(massshooting)
library(httr)
library(readr)
library(shiny)
library(shinydashboard)
library(reshape2)
library(dplyr)
library(plotly)
library(shinythemes)
#I am going to download the API from Kaggle (it needs credentials)
kaggle.api <- "https://www.kaggle.com/api/v1/datasets/download/zusmani/us-mass-shootings-last-50-years/Mass%20Shootings%20Dataset.csv"
kaggle.auth <- function() {
source("credentials.R")
httr::authenticate(username, key)
}
response <- httr::GET(kaggle.api, kaggle.auth())
massshooting.raw <- read_csv(response$content)
massshooting.raw %>%
mutate(Date = as.Date(Date, format = "%m/%d/%Y"))
massshooting.raw %>%
na.omit()
View(massshooting.raw)
massshooting.raw %>%
tibble(x = c(NA, 1, 2, 3, 4,5,6,7,8,9,10,11,12.13),
y = c(1:13)) %>%
filter(!is.na(x))
?tibble
massshooting.raw <- read_csv(response$content) %>%
na.omit()
massshooting.raw %>%
mutate(Date = as.Date(Date, format = "%m/%d/%Y"))
runApp('Project-1-API.R')
runApp('Project-1-API.R')
runApp('Project-1-API.R')
runApp('Project-1-API.R')
runApp('Project-1-API.R')
runApp('~/GitHub/HW3-natashag/Class_11-API-DBs/API')
runApp('Project-1-API.R')
View(massshooting)
View(masshooting)
username <- "natasha1704"
key <- "daa4f48a8e9bfa46754fd6361fc78806"
runApp('Project-1-API.R')
View(masshooting)
runApp('Project-1-API.R')
runApp('Project-1-API.R')
masshooting %>%
mutate(Date = as.Date(Date, format = "%m/%d/%Y"))%>%
mutate(Year=substring(a,7,10))
runApp('Project-1-API.R')
runApp('Project-1-API.R')
kaggle.api <- "https://www.kaggle.com/api/v1/datasets/download/zusmani/us-mass-shootings-last-50-years/Mass%20Shootings%20Dataset%20Ver%205.csv"
kaggle.auth <- function() {
source("credentials.R")
httr::authenticate(username, key)
}
response <- httr::GET(kaggle.api, kaggle.auth())
masshooting <- read_csv(response$content) %>%
na.omit() #This is filtering the missing values
View(masshooting)
runApp('Project-1-API.R')
runApp('Project-1-API.R')
runApp('Project-1-API.R')
masshooting <- read_csv(response$content)
View(masshooting)
runApp('Project-1-API.R')
runApp('Project-1-API.R')
runApp('Project-1-API.R')
runApp('Project-1-API.R')
runApp('Project-1-API.R')
runApp('Project-1-API.R')
runApp('Project-1-API.R')
masshooting <- read_csv(response$content) %>%
select(c("Title", "Date", "Incident Area","Gender" ,"Target", "Summary", "Fatalities", "Injured","Total victims",
"Mental Health Issues","Race")) %>%
na.omit() #This is filtering the missing values
str(masshooting$Date)
as.numeric(masshooting$Date)
runApp('Project-1-API.R')
?year
masshooting %>%
mutate(Date = as.Date(Date, format = "%m/%d/%Y"))%>%
mutate(Year= format(as.Date(Date, format = "%m/%d/%Y"),"%Y"))
masshooting %>%
mutate(Date = as.Date(Date, format = "%m/%d/%Y"))%>%
mutate(Year= format(as.Date(Date, format = "%m/%d/%Y"),"%Y"))
runApp('Project-1-API.R')
runApp('Project-1-API.R')
View(masshooting)
masshooting %>%
mutate(Date = as.Date(Date, format = "%m/%d/%Y"))%>%
mutate(Year= format(as.Date(Date, format = "%m/%d/%Y"),"%Y"))
runApp('Project-1-API.R')
runApp('Project-1-API.R')
masshooting.raw <- read_csv(response$content) %>%
select(c("Title", "Date", "Incident Area","Gender" ,"Target", "Summary", "Fatalities", "Injured","Total victims",
"Mental Health Issues","Race")) %>%
na.omit() #This is filtering the missing values
username <- "natasha1704"
key <- "daa4f48a8e9bfa46754fd6361fc78806"
runApp('Project-1-API.R')
runApp('Project-1-API.R')
runApp('Project-1-API.R')
runApp('Project-1-API.R')
#I am going to download the API from Kaggle (it needs credentials from Kaggle)
kaggle.api <- "https://www.kaggle.com/api/v1/datasets/download/zusmani/us-mass-shootings-last-50-years/Mass%20Shootings%20Dataset%20Ver%205.csv"
kaggle.auth <- function() {
source("credentials.R")
httr::authenticate(username, key)
}
response <- httr::GET(kaggle.api, kaggle.auth())
masshooting <- read_csv(response$content) %>%
select(c("Title", "Date", "Incident Area","Gender" ,"Target", "Summary", "Fatalities", "Injured","Total victims",
"Mental Health Issues","Race")) %>%
na.omit() #This is filtering the missing values
View(masshooting)
# I am going to transform the Date column to date form
masshooting <- masshooting %>%
mutate(Date = as.Date(Date, format = "%m/%d/%Y"))%>%
mutate(Year= format(as.Date(Date, format = "%m/%d/%Y"),"%Y"))
runApp('Project-1-API.R')
input <- NULL
input$DateSelect <- c(as.Date("2017-09-01"), as.Date("2017-09-15"))
masshooting_test <- masshooting %>%
# Data Filter
filter(Date >= input$DateSelect[1] & Date <= input$DateSelect[2])
View(masshooting)
input$DateSelect <- c(as.Date("2017-09-01"), as.Date("2018-09-15"))
masshooting_test <- masshooting %>%
# Data Filter
filter(Date >= input$DateSelect[1] & Date <= input$DateSelect[2])
library(tidyverse)
library(readr)
avengers<-read.csv("avengers.csv")
avengers<- avengers %>%
mutate(sex= if_else(Gender== "MALE",1,0))
mean(avengers$sex)
subsavengers<-subset(avengers, avengers$Year>= 1960)
#plot
library(ggplot2)
plot1<- ggplot(avengers, aes(x=Year, y=Appearances, color= Gender)) + geom_point()
plot1
plot1
runApp('Project-1-API.R')
avengers2<-read.csv("avengers3.csv")
install.packeges("colorspace")
install.packages("colorspace")
install.packages("colorspace")
library(tidyverse)
avengers2<-read.csv("avengers3.csv")
plot2<-ggplot(avengers2,aes(x=Year, y=Male))+ geom_line()
library(tidyverse)
install.packages("tidyverse")
library("readr")
library("ggplot")
library(tidyverse)
library(shiny); runApp('Project-1-API.R')
key <- "daa4f48a8e9bfa46754fd6361fc78806"
runApp('Project-1-API.R')
runApp('Project-1-API.R')
username <- "natasha1704"
key <- "daa4f48a8e9bfa46754fd6361fc78806"
library(shiny); runApp('Project-1-API.R')
runApp('Project-1-API.R')
runApp('Project-1-API.R')
runApp('Project-1-API.R')
runApp('Project-1-API.R')
View(masshooting)
kaggle.api <- "https://www.kaggle.com/api/v1/datasets/download/zusmani/us-mass-shootings-last-50-years/Mass%20Shootings%20Dataset%20Ver%205.csv"
kaggle.auth <- function() {
source("credentials.R")
httr::authenticate(username, key)
}
response <- httr::GET(kaggle.api, kaggle.auth())
masshooting<- read_csv(response$content) %>%
select(c("Title", "Date", "Incident Area","Gender" ,"Target", "Summary", "Fatalities", "Injured","Total victims",
"Mental Health Issues","Race")) %>%
na.omit() #This is filtering the missing values
View(masshooting)
runApp('Project-1-API.R')
masshooting <- masshooting %>%
rename(masshooting, replace=c("Total victims"="Total.victims"))
masshooting <- rename(masshooting, replace=c("Total victims"="Total.victims"))
runApp('Project-1-API.R')
runApp('Project-1-API.R')
runApp('Project-1-API.R')
runApp('Project-1-API.R')
runApp('Project-1-API.R')
runApp('Project-1-API.R')
masshooting<-subset(masshooting, Gender== "Male" | Gender== "Female" | Gender== "M")
runApp('Project-1-API.R')
kaggle.api <- "https://www.kaggle.com/api/v1/datasets/download/zusmani/us-mass-shootings-last-50-years/Mass%20Shootings%20Dataset%20Ver%205.csv"
kaggle.auth <- function() {
source("credentials.R")
httr::authenticate(username, key)
}
response <- httr::GET(kaggle.api, kaggle.auth())
masshooting<- read_csv(response$content) %>%
select(c("Title", "Date", "Incident Area","Gender" ,"Target", "Summary", "Fatalities", "Injured","Total victims",
"Mental Health Issues","Race")) %>%
na.omit() #This is filtering the missing values
# I am going to transform the Date column to date form
masshooting <- masshooting %>%
mutate(Date = as.Date(Date, format = "%m/%d/%Y"))%>%
mutate(Year= format(as.Date(Date, format = "%m/%d/%Y"),"%Y"))
masshooting<-subset(masshooting, Gender== "Male" | Gender== "Female" | Gender== "M" | Gender== "Unkown")
masshooting <- masshooting %>%
mutate(Gender= case_when(
Gender=="Male"~"Male",
Gender=="M"~"Male",
Gender=="Female"~"Female",
Gender=="Unkown"~"Unkown")
)
runApp('Project-1-API.R')
runApp('Project-1-API.R')
View(masshooting)
runApp('Project-1-API.R')
runApp('Project-1-API.R')
runApp('Project-1-API.R')
runApp('Project-1-API.R')
runApp('Project-1-API.R')
runApp('Project-1-API.R')
runApp('Project-1-API.R')
runApp('Project-1-API.R')
runApp('Project-1-API.R')
runApp('Project-1-API.R')
runApp('Project-1-API.R')
